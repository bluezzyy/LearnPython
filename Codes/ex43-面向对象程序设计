# Learn Python the Hard Way ---- 第三天
# Date： 2017/01/06  16：15

--------------------作者写代码的心路历程--------------------

The way to look at this process is that it is "top down," meaning it starts from the very abstract loose idea and then slowly refines it until the idea is solid and something you can code.
---- 这个方法就像是“自顶向下”法，从非常抽象的想法开始，慢慢提炼并加以改善，直到你能用代码实现。

I start by just writing about the problem and trying to think up anything I can about it. Maybe I'll even draw a diagram or two, maybe a map of some kind, or even write myself a series of emails describing the problem. This gives me a way to express the key concepts in the problem and also explore what I might already know about it.
---- 我习惯一开始把问题写下来并且想一下，关于这个问题我所知道的一切。甚至我还会画一两张图，或者给自己写邮件来描绘问题。这让我能够清晰表述问题，同时也让我知道有什么是已经掌握的。

Then I go through these notes, drawings, and descriptions and I pull out the key concepts. There's a simple trick to doing this: Simply make a list of all the nouns and verbs in your writing and drawings, then write out how they're related. This gives me a good list of names for classes, objects, and functions in the next step. I take this list of concepts and then research any that I don't understand so I can refine them further if I needed.
---- 然后我通过这些笔记，画画，还有描述。来提取出关键词，这有一个很简单的技巧：把你笔记中所有名词和动词找出来，然后看看他们有何关联。这让我很好的掌控类，对象还有函数之间的关系。下一步，我会按着这些关系，查找我不懂的知识点，然后进一步地提取我所需要的。

Once I have my list of concepts I create a simple outline/tree of the concepts and how they are related as classes. You can usually take your list of nouns and start asking "Is this one like other concept nouns? That means they have a common parent class, so what is it called?" Keep doing this until you have a class hierarchy that's just a simple tree list or a diagram. Then take the verbs you have and see if those are function names for each class and put them in your tree.
---- 一旦我有了列表，我会写出一个简短的大纲。你通常可以对着列表中的名词问自己：这个是不是和另外一个有类似的地方？这意味着他们有一个共同的父类，好了，那么这个父类是什么？重复这一步直到你用树形图把类的继承关系画出来。然后观察动词，看看他们是不是树形图中某个类的方法。如果是，写上吧。

With this class hierarchy figured out, I sit down and write some basic skeleton code that has just the classes, their functions, and nothing more. I then write a test that runs this code and makes sure the classes I've made make sense and work right. Sometimes I may write the test first though, and other times I might write a little test, a little code, a little test, etc. until I have the whole thing built.
---- 解决类的继承之后，我会坐下来写写代码的基本框架，包括类，函数。然后通过一个测试代码来确保之前的工作是正确的。有时候我也会先写测试代码，更多的时候我会一边写代码，一边写测试，直到我把整个事情搞定。

Finally, I keep cycling over this process repeating it and refining as I go and making it as clear as I can before doing more implementation. If I get stuck at any particular part because of a concept or problem I haven't anticipated, then I sit down and start the process over on just that part to figure it out more before continuing.
---- 最后，我会不断重复这个过程直到我很清楚，已经没有任何东西可以补充了。如果我被卡在了任何一个部分，我会坐下来重新思考这一部分，在解决之后，我才会继续下一步。

I will now go through this process while coming up with a game engine and a game for this exercise.
---- 接下来，我将会通过构思出一个游戏引擎和游戏来传授你这一套绝活（复现这个过程）。

----------------------Top Down vs. Bottom Up-------------------

The process is typically labeled "top down" since it starts at the most abstract concepts (the top) and works its way down to actual implementation. I want you to use this process I just described when analyzing problems in the book from now on, but you should know that there's another way to solve problems in programming that starts with code and goes "up" to the abstract concepts. This other way is labeled "bottom up." Here are the general steps you follow to do this:
---- “自顶向下”方法是从最抽象的概念开始，不断完善具体方法。刚刚我也给你做了一个例子。但同时，你应该知道有另外一种解决问题的办法，那就是从写代码开始，“自底向上”方法。你可以按照以下步骤进行实践：

1. Take a small piece of the problem; hack on some code and get it to run barely.
2. Refine the code into something more formal with classes and automated tests.
3. Extract the key concepts you're using and try to find research for them.
4. Write a description of what's really going on.
5. Go back and refine the code, possibly throwing it out and starting over.
6. Repeat, moving on to some other piece of the problem.

---- 
1. 着眼于一个小问题，写些代码并尝试运行
2. 使用常见的类和测试方法来完善代码
3. 明确你正在使用的关键概念，并且尝试去研究它
4. 写一个你将要执行的计划
5. 回头完善代码，有可能要抛弃之前的重头来过
6. 重复，继续解决其他问题
